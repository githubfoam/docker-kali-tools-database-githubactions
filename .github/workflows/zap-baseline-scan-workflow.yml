name: "ZAP Baseline  Scan CI workflow"


on:
  push:
    branches: [ main ]
  schedule:
      - cron:  '0 0 1 * *' ##execution of a task in the first minute of the month 

jobs:

# https://github.com/marketplace/actions/owasp-zap-baseline-scan
 ubuntu-latest-zap-baseline -basic-job:
    name: " the OWASP ZAP Baseline scan to find vulnerabilities in your web application ubuntu latest"
    runs-on: ubuntu-latest
    steps:
      - name: "ZAP Baseline Scan"
        uses: zaproxy/action-baseline@v0.6.1
        with:
        # https://github.com/OWASP/OWASP-VWAD/blob/master/src/data/online.json
          target: 'http://testphp.vulnweb.com'    
      - name: "ZAP Baseline Scan"
        uses: zaproxy/action-baseline@v0.6.1
        with:
        # https://github.com/OWASP/OWASP-VWAD/blob/master/src/data/online.json
          target: 'https://www.zaproxy.org'            

# https://github.com/marketplace/actions/owasp-zap-baseline-scan
 ubuntu-latest-zap-baseline -advanced-job:
    name: " the OWASP ZAP Baseline scan to find vulnerabilities in your web application ubuntu latest"
    runs-on: ubuntu-latest
     steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: "ZAP Baseline Scan"
        uses: zaproxy/action-baseline@v0.6.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: 'https://www.zaproxy.org'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # ubuntu-latest-job:
  #   name: "kali-tools-database ubuntu latest"
  #   runs-on: ubuntu-latest
  #   env:
  #     distribution: "kalilinux" #https://hub.docker.com/r/kalilinux/kali-rolling
  #     version: "latest"
  #     name: "kali/kali-tools-database"
  #     dockerfilename: "Dockerfile.kalilinux.kali-tools-database"
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker build kali linux"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}:${version} . --file dockerfiles/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name}:${version}
  #       docker system df -v               
  #       docker image inspect ${name}:${version}  
  #       docker container ls -a
                  

  # ubuntu-2004-job:
  #   name: "kali-tools-database ubuntu  20.04"
  #   runs-on: ubuntu-20.04
  #   env:
  #     distribution: "kalilinux" #https://hub.docker.com/r/kalilinux/kali-rolling
  #     version: "latest"
  #     name: "kali/kali-tools-database"
  #     dockerfilename: "Dockerfile.kalilinux.kali-tools-database"    
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker build kali linux"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}:${version} . --file dockerfiles/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name}:${version}
  #       docker system df -v               
  #       docker image inspect ${name}:${version}  
  #       docker container ls -a
        


  # ubuntu-1804-job:
  #   name: "kali-tools-database ubuntu-18.04"
  #   runs-on: ubuntu-18.04
  #   env:
  #     distribution: "kalilinux" #https://hub.docker.com/r/kalilinux/kali-rolling
  #     version: "latest"
  #     name: "kali/kali-tools-database"
  #     dockerfilename: "Dockerfile.kalilinux.kali-tools-database"    
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch    
  #   - name: "docker build kali linux"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name}:${version} . --file dockerfiles/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name}:${version}
  #       docker system df -v               
  #       docker image inspect ${name}:${version}  
  #       docker container ls -a




