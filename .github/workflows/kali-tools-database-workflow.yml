name: "kali-tools-database CI workflow"


on:
  push:
    branches: [ test ]

jobs:

  ubuntu-latest-job:
    name: "kali-tools-database ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "kalilinux" #https://hub.docker.com/r/kalilinux/kali-rolling
      version: "latest"
      name: "kali/kali-tools-database"
      dockerfilename: "Dockerfile.kalilinux.kali-tools-database"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch   
    - name: "docker build kali linux"
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not used
        sudo docker build --no-cache --rm  -t ${name}:${version} . --file dockerfiles/${dockerfilename} 
        docker image ls
        docker image history ${name}:${version} 
        docker system df -v               
        docker image inspect ${name}:${version}   
        docker container ls -a
    # - name: "tool interactive kali linux"
    #   run: |
    #     docker pull kalilinux/kali-rolling
    #     #the input device is not a TTY
    #     docker run --tty --interactive kalilinux/kali-rolling /bin/bash
    - name: "interactive kali linux"
      run: |
        docker build --no-cache --rm  -t ${name}/${version} . --file dockerfiles/${dockerfilename} 
        docker run -d --name kalitool ${name}:${version} /bin/bash  
        docker container ls -a 
        # docker run --tty --interactive kalitool /bin/bash     
        docker exec kalitool ls -la
        

  # ubuntu-2004-job:
  #   name: "kali-tools-database ubuntu  20.04"
  #   runs-on: ubuntu-latest
  #   env:
  #     distribution: "kalilinux" #https://hub.docker.com/r/kalilinux/kali-rolling
  #     version: "latest"
  #     name: "kali:kali-tools-database"
  #     dockerfilename: "Dockerfile.kalilinux.kali-tools-database"    
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch   
  #   - name: "docker build kali linux"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name} . --file dockerfiles/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name} 
  #       docker system df -v               
  #       docker image inspect ${name}   
  #       docker container ls -a
        


  # ubuntu-1804-job:
  #   name: "kali-tools-database ubuntu-18.04"
  #   runs-on: ubuntu-18.04
  #   env:
  #     distribution: "kalilinux" #https://hub.docker.com/r/kalilinux/kali-rolling
  #     version: "latest"
  #     name: "kali:kali-tools-database"
  #     dockerfilename: "Dockerfile.kalilinux.kali-tools-database"    
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: "os fingerprinting"
  #     run: |
  #       hostnamectl status
  #       lsb_release -a
  #       lsb_release -d
  #       cat /etc/lsb-release
  #       cat /etc/issue
  #       cat /etc/os-release
  #       sudo apt-get install -y neofetch && neofetch    
  #   - name: "docker build kali linux"
  #     run: |
  #       # destroyed afterwards (use --rm )
  #       # all subsequent Dockerfile commands generate new images and the cache is not used
  #       sudo docker build --no-cache --rm  -t ${name} . --file dockerfiles/${dockerfilename} 
  #       docker image ls
  #       docker image history ${name} 
  #       docker system df -v               
  #       docker image inspect ${name}   
  #       docker container ls -a




